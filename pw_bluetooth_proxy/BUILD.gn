# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pigweed/third_party/emboss/emboss.gni")
import("$dir_pw_bloat/bloat.gni")
import("$dir_pw_build/module_config.gni")
import("$dir_pw_build/target_types.gni")
import("$dir_pw_chrono/backend.gni")
import("$dir_pw_thread/backend.gni")
import("$dir_pw_unit_test/test.gni")

config("public_include_path") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

pw_test_group("tests") {
  tests = [
    ":pw_bluetooth_proxy_test_v1",
    ":pw_bluetooth_proxy_test_v2",
  ]
}

# LINT.IfChange

_pw_bluetooth_proxy_public = [
  "public/pw_bluetooth_proxy/basic_l2cap_channel.h",
  "public/pw_bluetooth_proxy/channel_proxy.h",
  "public/pw_bluetooth_proxy/direction.h",
  "public/pw_bluetooth_proxy/gatt_notify_channel.h",
  "public/pw_bluetooth_proxy/h4_packet.h",
  "public/pw_bluetooth_proxy/internal/acl_data_channel.h",
  "public/pw_bluetooth_proxy/internal/gatt_notify_channel_internal.h",
  "public/pw_bluetooth_proxy/internal/h4_storage.h",
  "public/pw_bluetooth_proxy/internal/hci_transport.h",
  "public/pw_bluetooth_proxy/internal/l2cap_aclu_signaling_channel.h",
  "public/pw_bluetooth_proxy/internal/l2cap_channel.h",
  "public/pw_bluetooth_proxy/internal/l2cap_channel_manager.h",
  "public/pw_bluetooth_proxy/internal/l2cap_coc_internal.h",
  "public/pw_bluetooth_proxy/internal/l2cap_leu_signaling_channel.h",
  "public/pw_bluetooth_proxy/internal/l2cap_signaling_channel.h",
  "public/pw_bluetooth_proxy/internal/l2cap_status_tracker.h",
  "public/pw_bluetooth_proxy/internal/locked_l2cap_channel.h",
  "public/pw_bluetooth_proxy/internal/logical_transport.h",
  "public/pw_bluetooth_proxy/internal/multibuf.h",
  "public/pw_bluetooth_proxy/internal/recombiner.h",
  "public/pw_bluetooth_proxy/l2cap_channel_common.h",
  "public/pw_bluetooth_proxy/l2cap_coc.h",
  "public/pw_bluetooth_proxy/l2cap_status_delegate.h",
  "public/pw_bluetooth_proxy/proxy_host.h",
  "public/pw_bluetooth_proxy/single_channel_proxy.h",
]

# LINT.ThenChange(bt-proxy.bzl, CMakeLists.txt)

# LINT.IfChange

_pw_bluetooth_proxy_public_deps = [
  ":config",
  "$dir_pw_allocator",
  "$dir_pw_bluetooth:emboss_hci_common",
  "$dir_pw_bluetooth:emboss_hci_data",
  "$dir_pw_bluetooth:emboss_hci_events",
  "$dir_pw_bluetooth:emboss_hci_h4",
  "$dir_pw_bluetooth:emboss_l2cap_frames",
  "$dir_pw_bytes",
  "$dir_pw_containers:flat_map",
  "$dir_pw_containers:inline_queue",
  "$dir_pw_containers:intrusive_forward_list",
  "$dir_pw_containers:vector",
  "$dir_pw_multibuf:allocator",
  "$dir_pw_multibuf:multibuf_v1",
  "$dir_pw_multibuf:multibuf_v2",
  "$dir_pw_sync:lock_annotations",
  "$dir_pw_sync:mutex",
  dir_pw_function,
  dir_pw_result,
  dir_pw_span,
  dir_pw_status,
]

_pw_bluetooth_proxy_deps = [
  "$dir_pw_assert:check",
  "$dir_pw_bluetooth:emboss_att",
  "$dir_pw_bluetooth:emboss_hci_commands",
  "$dir_pw_bluetooth:emboss_util",
  "$dir_pw_containers:algorithm",
  "$dir_pw_span:cast",
  dir_pw_log,
]

_pw_bluetooth_proxy_sources = [
  "acl_data_channel.cc",
  "basic_l2cap_channel.cc",
  "channel_proxy.cc",
  "gatt_notify_channel.cc",
  "h4_storage.cc",
  "l2cap_aclu_signaling_channel.cc",
  "l2cap_channel.cc",
  "l2cap_channel_manager.cc",
  "l2cap_coc.cc",
  "l2cap_leu_signaling_channel.cc",
  "l2cap_signaling_channel.cc",
  "l2cap_status_tracker.cc",
  "multibuf_v1.cc",
  "multibuf_v2.cc",
  "proxy_host.cc",
  "recombiner.cc",
  "single_channel_proxy.cc",
]

# LINT.ThenChange(Android.bp, bt-proxy.bzl, CMakeLists.txt)

pw_source_set("pw_bluetooth_proxy") {
  public = _pw_bluetooth_proxy_public
  public_configs = [ ":public_include_path" ]
  public_deps = _pw_bluetooth_proxy_public_deps
  deps = _pw_bluetooth_proxy_deps
  sources = _pw_bluetooth_proxy_sources
}

pw_source_set("pw_bluetooth_proxy_v1") {
  public = _pw_bluetooth_proxy_public
  public_configs = [
    ":public_include_path",
    ":multibuf_v1",
  ]
  public_deps = _pw_bluetooth_proxy_public_deps
  deps = _pw_bluetooth_proxy_deps
  sources = _pw_bluetooth_proxy_sources
  visibility = [ ":*" ]
}

pw_source_set("pw_bluetooth_proxy_v2") {
  public = _pw_bluetooth_proxy_public
  public_configs = [
    ":public_include_path",
    ":multibuf_v2",
  ]
  public_deps = _pw_bluetooth_proxy_public_deps
  deps = _pw_bluetooth_proxy_deps
  sources = _pw_bluetooth_proxy_sources
  visibility = [ ":*" ]
}

# Module configuration

declare_args() {
  # The build target that overrides the default configuration options for this
  # module. This should point to a source set that provides defines through a
  # public config (which may -include a file or add defines directly).
  pw_bluetooth_proxy_CONFIG = pw_build_DEFAULT_MODULE_CONFIG
}

pw_source_set("config") {
  public = [ "public/pw_bluetooth_proxy/config.h" ]
  public_configs = [ ":public_include_path" ]
  public_deps = [ pw_bluetooth_proxy_CONFIG ]
}

config("multibuf_v1") {
  defines = [ "PW_BLUETOOTH_PROXY_MULTIBUF=PW_BLUETOOTH_PROXY_MULTIBUF_V1" ]
}

config("multibuf_v2") {
  defines = [ "PW_BLUETOOTH_PROXY_MULTIBUF=PW_BLUETOOTH_PROXY_MULTIBUF_V2" ]
}

# Tests

# LINT.IfChange

_pw_bluetooth_proxy_test_deps = [
  "$dir_pw_allocator:libc_allocator",
  "$dir_pw_allocator:null_allocator",
  "$dir_pw_allocator:synchronized_allocator",
  "$dir_pw_allocator:testing",
  "$dir_pw_bluetooth:emboss_att",
  "$dir_pw_bluetooth:emboss_hci_commands",
  "$dir_pw_bluetooth:emboss_hci_common",
  "$dir_pw_bluetooth:emboss_hci_events",
  "$dir_pw_bluetooth:emboss_hci_h4",
  "$dir_pw_bluetooth:emboss_util",
  "$dir_pw_multibuf:simple_allocator",
  "$dir_pw_span:cast",
  "$dir_pw_sync:mutex",
  "$dir_pw_sync:no_lock",
  "$dir_pw_thread:test_thread_context",
  "$dir_pw_thread:thread",
  "$pw_external_fuchsia:stdcompat",
  dir_pw_unit_test,
]

_pw_bluetooth_proxy_test_sources = [
  "channel_proxy_test.cc",
  "gatt_notify_test.cc",
  "h4_packet_test.cc",
  "l2cap_coc_test.cc",
  "proxy_host_test.cc",
  "pw_bluetooth_proxy_private/test_utils.h",
  "recombiner_test.cc",
  "test_utils.cc",
  "utils_test.cc",
]

# LINT.ThenChange(bt-proxy.bzl, CMakeLists.txt)

pw_test("pw_bluetooth_proxy_test_v1") {
  enable_if =
      dir_pw_third_party_emboss != "" && pw_thread_THREAD_BACKEND != "" &&
      pw_thread_TEST_THREAD_CONTEXT_BACKEND != ""
  sources = _pw_bluetooth_proxy_test_sources
  deps = _pw_bluetooth_proxy_test_deps + [
           ":pw_bluetooth_proxy_v1",
           "$dir_pw_multibuf:simple_allocator",
         ]
}

pw_test("pw_bluetooth_proxy_test_v2") {
  enable_if =
      dir_pw_third_party_emboss != "" && pw_thread_THREAD_BACKEND != "" &&
      pw_thread_TEST_THREAD_CONTEXT_BACKEND != ""
  sources = _pw_bluetooth_proxy_test_sources
  deps = _pw_bluetooth_proxy_test_deps + [ ":pw_bluetooth_proxy_v2" ]
}
