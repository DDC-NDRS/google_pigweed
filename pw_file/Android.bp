// Copyright 2025 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
package {
    default_applicable_licenses: ["external_pigweed_license"],
}

cc_library {
    name: "pw_file",
    defaults: [
        "pw_android_common_backends",
        "pw_rpc_defaults",
        "pw_rpc_raw_defaults",
    ],
    srcs: [
        "flat_file_system.cc",
    ],
    header_libs: [
        "pw_file_pwpb",
        "pw_protobuf_pwpb"
    ],
    export_header_lib_headers: [
        "pw_file_pwpb",
    ],
    export_include_dirs: [
        "public",
    ],
    static_libs: [
        "pw_bytes",
        "pw_protobuf",
        "pw_toolchain",
        "pw_stream_interval_reader",
    ],
}

filegroup {
    name: "pw_file_proto_src",
    srcs: [
        "file.proto",
    ],
}

genrule {
    name: "pw_file_file_proto_with_prefix",
    defaults: ["pw_rpc_add_prefix_to_proto"],
    srcs: ["file.proto"],
    out: ["pw_file/file.proto"],
}

genrule {
    name: "pw_file_raw_rpc_header",
    srcs: [
        ":pw_file_file_proto_with_prefix",
        ":pw_file_proto_src",
        ":pw_protobuf_common_proto",
    ],
    cmd: "python3 $(location pw_protobuf_compiler_py) " +
        "--proto-path=external/pigweed/pw_protobuf/ " +
        "--proto-path=external/pigweed/pw_tokenizer/ " +
        "--proto-path=$$(dirname $$(dirname $$(dirname $(location :pw_file_file_proto_with_prefix)))) " +
        "--proto-path=external/protobuf/src/ " +
        "--out-dir=$(genDir) " +
        "--plugin-path=$(location pw_rpc_plugin_rawpb_py) " +
        "--compile-dir=$(genDir) " +
        "--sources $(location :pw_file_file_proto_with_prefix) " +
        "--language raw_rpc " +
        "--no-experimental-proto3-optional " +
        "--no-experimental-editions " +
        "--pwpb-no-oneof-callbacks " +
        "--protoc=$(location aprotoc) && " +
        // TODO(b/308678575) - Avoid making an extra copy of the created file.
        "python3 -c \"import os; import shutil; " +
        "shutil.copy2(os.path.splitext('$(location :pw_file_file_proto_with_prefix)')[0]+'.raw_rpc.pb.h', '$(out)')\"",
    out: [
        "pw_file/file.raw_rpc.pb.h",
    ],
    tools: [
        "aprotoc",
        "pw_protobuf_compiler_py",
        "pw_rpc_plugin_rawpb_py",
    ],
}

genrule {
    name: "pw_file_pwpb_rpc_header",
    defaults: ["pw_rpc_generate_file_rpc_pwpb_header_with_prefix_and_protobuf"],
    srcs: [
        ":pw_file_file_proto_with_prefix",
        ":pw_protobuf_common_proto",
    ],
    out: ["pw_file/file.rpc.pwpb.h"],
}

genrule_defaults {
    name: "pw_rpc_generate_file_rpc_pwpb_header_with_prefix_and_protobuf",
    cmd: "in_files=($(in)); proto_files=(); proto_path_args=(); " +
        "for f in \"$${in_files[@]}\"; do " +
        "if [[ \"$${f##*.}\" == \"proto\" ]]; then " +
        "proto_path_args+=(\"--proto-path=$$(dirname $$(dirname $${f})) \"); " +
        "proto_files+=(\"$${f}\"); fi; done; " +
        "python3 $(location pw_protobuf_compiler_py) " +
        "--proto-path=external/protobuf/src/ " +
        "--plugin-path=$(location pw_rpc_plugin_pwpb_py) " +
        "--out-dir=$(genDir) " +
        "$${proto_path_args[@]}" +
        "--language pwpb_rpc " +
        "--sources $${proto_files[@]} " +
        "--no-experimental-proto3-optional " +
        "--no-experimental-editions " +
        "--pwpb-no-oneof-callbacks " +
        "--protoc=$(location aprotoc)",
    tools: [
        "aprotoc",
        "pw_protobuf_compiler_py",
        "pw_rpc_plugin_pwpb_py",
    ],
}

genrule {
    name: "pw_file_pwpb_proto_header",
    srcs: [
        ":libprotobuf-internal-protos",
        ":pw_file_file_proto_with_prefix",
        ":pw_protobuf_common_proto",
        ":pw_tokenizer_proto_options_proto",
    ],
    cmd: "python3 $(location pw_protobuf_compiler_py) " +
        "--proto-path=external/pigweed/pw_protobuf/ " +
        "--proto-path=external/pigweed/pw_tokenizer/ " +
        "--proto-path=$$(dirname $$(dirname $$(dirname $(location :pw_file_file_proto_with_prefix)))) " +
        "--proto-path=external/protobuf/src/ " +
        "--out-dir=$(genDir) " +
        "--plugin-path=$(location pw_protobuf_plugin_py) " +
        "--compile-dir=$(genDir) " +
        "--sources $(location :pw_file_file_proto_with_prefix) " +
        "--language pwpb " +
        "--no-experimental-proto3-optional " +
        "--no-experimental-editions " +
        "--pwpb-no-oneof-callbacks " +
        "--protoc=$(location aprotoc) && " +
        // TODO(b/308678575) - Avoid making an extra copy of the created file.
        "python3 -c \"import os; import shutil; " +
        "shutil.copy2(os.path.splitext('$(location :pw_file_file_proto_with_prefix)')[0]+'.pwpb.h', '$(out)')\"",
    out: [
        "pw_file/file.pwpb.h",
    ],
    tools: [
        "aprotoc",
        "pw_protobuf_compiler_py",
        "pw_protobuf_plugin_py",
    ],
}

cc_library_headers {
    name: "pw_file_pwpb",
    defaults: [
        "pw_android_common_target_support",
    ],
    generated_headers: [
        "pw_file_pwpb_proto_header",
        "pw_file_pwpb_rpc_header",
        "pw_file_raw_rpc_header",
    ],
    export_generated_headers: [
        "pw_file_pwpb_proto_header",
        "pw_file_pwpb_rpc_header",
        "pw_file_raw_rpc_header",
    ],
}
