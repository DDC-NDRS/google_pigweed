// Copyright 2025 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
{
    use kernel::__private::foreign_box::{static_foreign_rc, upcast_foreign_rc};
    use kernel::object::{KernelObject, ChannelInitiatorObject};

    type AtomicUsize = <K as kernel::Arch>::AtomicUsize;

    // Create the channel initiator object.
    let initiator = unsafe { static_foreign_rc!(
        AtomicUsize,
        ChannelInitiatorObject<K>,
        ChannelInitiatorObject::new(object_{{object.handler_app}}_{{object.handler_object_name | lower}}_handler))
    };

    // Upcast the concrete object into a dynamic one.
    upcast_foreign_rc!(initiator => dyn KernelObject<K>)
}