// Copyright 2025 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

{% if apps.len() > 0 %}
pub fn start() {
    use core::ptr::NonNull;

    use {{ arch_crate_name }} as arch;
    use kernel::__private::foreign_box::{ForeignRc, static_foreign_box};
    use kernel::macro_exports::foreign_box::ForeignBox;
    use kernel::object::{KernelObject, ObjectTable};
    use kernel::scheduler::timer::TimerCallback;

    type MemoryConfig = arch::MemoryConfig;
    type K = arch::Arch;
    let kernel = K {};

{%- for (app_name, app) in apps %}
    let start_fn_{{app_name}} = {{app.start_fn_address | to_hex}}_usize;

    const MEMORY_CONFIG_{{app_name | uppercase }}: MemoryConfig = MemoryConfig::const_new(&[
        kernel::MemoryRegion::new(
            kernel::MemoryRegionType::ReadOnlyExecutable,
            {{app.flash_start_address | to_hex}},
            {{app.flash_end_address | to_hex}},
        ),
        kernel::MemoryRegion::new(
            kernel::MemoryRegionType::ReadWriteData,
            {{app.ram_start_address | to_hex}},
            {{app.ram_end_address | to_hex}},
        ),
    ]);

    {%- for (object_name, object) in app.process.objects %}
        #[allow(non_snake_case)]
        let object_{{object_name}} =
        {% match object %}
            {% when ObjectConfig::Ticker(ticker) %}{{ticker}}
        {% endmatch %}
        ;
    {%- endfor -%}

    let object_table_{{app_name}}: ForeignBox<dyn ObjectTable<K>> = unsafe {
        static_foreign_box!(
            [ForeignRc<<K as kernel::Arch>::AtomicUsize, dyn KernelObject<K>>; {{app.process.objects.len()}}],
            [
            {%- for (object_name, object) in app.process.objects %}
                object_{{object_name}},
            {%- endfor -%}
            ]
        )
    };


    let process_{{app_name}} = unsafe { kernel::init_non_priv_process!(
        "{{app.process.name}}",
        MEMORY_CONFIG_{{app_name | uppercase}},
        object_table_{{app_name}}
    )};

{%- for thread in app.process.threads -%}
{% set thread_index = loop.index0 %}
    let thread_{{app_name}}_{{thread_index}} = unsafe {
        kernel::init_non_priv_thread!(
            "{{thread.name}}",
            process_{{app_name}},
            start_fn_{{app_name}},
            {{app.initial_sp | to_hex}},
            {{thread.stack_size_bytes}}
        )
    };
    kernel::start_thread(arch::Arch, thread_{{app_name}}_{{thread_index}});
{%- endfor -%}
{%- endfor -%}
}
{% endif %}
